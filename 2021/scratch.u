sumInt : [Int] -> Int
sumInt elems = List.foldLeft (+) +0 elems

baseCrabCost positionOption crab =
      let baseDistance = (Nat.-) crab positionOption
          convert = Int.truncate0 . round . abs . Int.toFloat
          convert baseDistance


solve : Text -> (Nat -> Int) -> Optional Int
solve input fun =
    let crabs = map (a -> Optional.getOrElse (9999999999) (Nat.fromText a)) (Text.split ?, input)
        minCrab = Optional.getOrElse 0 <| minimum crabs
        maxCrab = Optional.getOrElse 0 <| maximum crabs

        possibles = List.range minCrab (maxCrab+1)
        sums = map (opt -> sumInt(map (fun . baseCrabCost opt) crabs)) possibles
        minimum sums

> data = "16,1,2,0,4,2,7,1,2,14"

> solve data (flip (-) 0)
> solve data (a -> (sumInt . map Nat.toInt) (List.range 1 (a + 1)))
